USE [DADOSPRO]
GO
/****** Object:  StoredProcedure [dbo].[SP_REL_MOVIMENTO_DIARIO_ACTION]    Script Date: 10/08/2021 17:35:28 ******/
SET ANSI_NULLS ON
GO
SET QUOTED_IDENTIFIER ON
GO
/******************************************************************************
* PROCEDURE : SP_REL_MOVIMENTO_DIARIO_ACTION  								  *
* OBJETIVO  : Mapa de movimentação diaria por produto ocorrida nos armazens   *
* AUTOR     : Carlos Torres                                                   *
* DATA      : 09/11/2012                                                      *
* OBSERVACAO:                                                                 * 
*	A variavel NTIPOREL recebe: 1 ou 2 ou 3									  *
*	1 - Fechamento	: Com base no saldo SB9 + SD1 + SD2 + SD3				  *
*	2 - Padrao		: Utiliza função padrao do PROTHEUS - CalcEst			  *
*	3 - Retroativo	: Com base no saldo Atual da SB2 menos SD1 + SD2 + SD3	  *
*   Em 12/11/2012 a tabela SF4 da TES era compartilhada e SF4040              *
*---------------------------------ALTERACOES----------------------------------*
* DATA       AUTOR       OBJETIVO                                             *
*----------- ----------- -----------------------------------------------------*
* 10/06/2015 C. T.    	 Inclusao da unidade de negocio                       *
*                                                                             *
******************************************************************************/
/*
MODELO DE CHAMADA DA PROCEDURE
EXEC SP_REL_MOVIMENTO_DIARIO_ACTION '20150501','20150631','600050144','600050144','11', '  ', '02', '3'
*/
ALTER PROCEDURE [dbo].[SP_REL_MOVIMENTO_DIARIO_ACTION]
	@DINICIO VARCHAR(10),
	@DFINAL VARCHAR(10),
	@CPRODUTOINI VARCHAR(15),
	@CPRODUTOFIN VARCHAR(15),
	@CLOCALINI VARCHAR(2),
	@CTIPOINI VARCHAR(2),
	@CFILIAL VARCHAR(2),
	@NTIPOREL VARCHAR(1),
	@CTIPO		VARCHAR(3) = NULL
AS
BEGIN
	DECLARE @CLOCALFIN VARCHAR(2),
			@CTIPOFIN VARCHAR(2),
			@CNOMEXLS VARCHAR(10)

	SET @CLOCALFIN = 'ZZ'
	SET @CTIPOFIN = 'ZZ'
	SET @CNOMEXLS = 'ACTION'

	IF LTRIM(RTRIM( ISNULL(@CLOCALINI,'') )) != ''
	BEGIN
		SET @CLOCALFIN = @CLOCALINI
	END
	IF LTRIM(RTRIM( ISNULL(@CTIPOINI,'') )) != ''
	BEGIN
		SET @CTIPOFIN = @CTIPOINI
	END
	--
	-- Tabela para visão analítica 
	--
	IF ISNULL(OBJECT_ID('TEMP_ANALITICO_BM_ACTION'), 0) <> 0
	BEGIN
		DROP TABLE TEMP_ANALITICO_BM_ACTION
	END
	IF @CFILIAL='01'
	BEGIN
		SET @CNOMEXLS = 'ACTION-SP'
		IF ISNULL(OBJECT_ID('TEMP_ANALITICO_BM_ACTION_MATRIZ'), 0) <> 0
		BEGIN
			DROP TABLE TEMP_ANALITICO_BM_ACTION_MATRIZ
		END
	END
	IF @CFILIAL='02'
	BEGIN
		SET @CNOMEXLS = 'ACTION-MG'
		IF ISNULL(OBJECT_ID('TEMP_ANALITICO_BM_ACTION_VARGINHA'), 0) <> 0
		BEGIN
			DROP TABLE TEMP_ANALITICO_BM_ACTION_VARGINHA
		END
	END
	--
	-- Tabela para visão sintética 
	--
	IF ISNULL(OBJECT_ID('TEMP_MOVIMENTOS_BM_ACTION'), 0) <> 0
	BEGIN
		DROP TABLE TEMP_MOVIMENTOS_BM_ACTION
	END
	IF @CFILIAL='01'
	BEGIN
		SET @CNOMEXLS = 'ACTION-SP'
		IF ISNULL(OBJECT_ID('TEMP_MOVIMENTOS_BM_ACTION_MATRIZ'), 0) <> 0
		BEGIN
			DROP TABLE TEMP_MOVIMENTOS_BM_ACTION_MATRIZ
		END
	END
	IF @CFILIAL='02'
	BEGIN
		SET @CNOMEXLS = 'ACTION-MG'
		IF ISNULL(OBJECT_ID('TEMP_MOVIMENTOS_BM_ACTION_VARGINHA'), 0) <> 0
		BEGIN
			DROP TABLE TEMP_MOVIMENTOS_BM_ACTION_VARGINHA
		END
	END

	--------------------------------------[ INICIO DA ROTINA PARA CALCULO DE/EM PODER DE TERCEIROS ]-------------------------------------------------
	--
	-- Cria tabela que recebe saldo inicial do produto com base na tabela SB6
	--
    CREATE TABLE #TEMP_SALDO_INICIAL_DE_SB6
      (
		B6_PRODUTO	VARCHAR(15)		 NULL,
		B1_DESC		VARCHAR(50)		 NULL,
		B1_TIPO		VARCHAR(2)		 NULL,
		B6_LOCAL	VARCHAR(2)		 NULL,
		B6_TIPO		VARCHAR(1)		 NULL,
		B6_QUANT	INT,
		B6_IDENT	VARCHAR(6)		 NULL,
		TT_QUANT	INT,
		B1_ITEMCC	VARCHAR(9)		 NULL
      )

	INSERT INTO #TEMP_SALDO_INICIAL_DE_SB6
      (
		B6_PRODUTO	,
		B1_DESC		,
		B1_TIPO		,
		B6_LOCAL	,
		B6_TIPO		,
		B6_QUANT	,
		B6_IDENT	,
		B1_ITEMCC
	  )	SELECT  
			B6_PRODUTO	,
			B1_DESC		,
			B1_TIPO		,
			B6_LOCAL	,
			B6_TIPO		,		-- B6_TIPO-> E=Movimentação EM terceiros D=Movimentação DE terceiros
			B6_QUANT	,
			B6_IDENT	,
			B1_ITEMCC
		FROM SB6040 SB6 WITH(NOLOCK)
			INNER JOIN SB1040 SB1 WITH(NOLOCK) ON SB1.B1_COD=SB6.B6_PRODUTO AND SB1.D_E_L_E_T_ 	<> '*' 
		WHERE   
			SB6.D_E_L_E_T_ 	 	<> '*' 			
			AND SB6.B6_FILIAL	=  @CFILIAL
			AND SB1.B1_TIPO		>= @CTIPOINI
			AND SB1.B1_TIPO		<= @CTIPOFIN
			AND SB6.B6_PRODUTO	>= @CPRODUTOINI
			AND SB6.B6_PRODUTO	<= @CPRODUTOFIN
			AND SB6.B6_LOCAL	>= @CLOCALINI
			AND SB6.B6_LOCAL	<= @CLOCALFIN
			AND SB6.B6_DTDIGIT	<  @DINICIO
			AND SB6.B6_ESTOQUE	=  'S'
			AND SB6.B6_PODER3	=  'R'

	UPDATE AUX
		SET AUX.TT_QUANT  =  
			ISNULL( 
					(
						SELECT SUM(SB6.B6_QUANT)
						FROM SB6040 SB6 WITH(NOLOCK)
						WHERE  
							SB6.B6_FILIAL	= @CFILIAL 
						AND SB6.B6_IDENT	= AUX.B6_IDENT 
						AND SB6.B6_PRODUTO	= AUX.B6_PRODUTO 
						AND SB6.D_E_L_E_T_ 	= ' ' 
						AND SB6.B6_ESTOQUE	= 'S'
						AND SB6.B6_PODER3	= 'D'
						AND SB6.B6_DTDIGIT	<  @DINICIO
					)	,0 )
	FROM #TEMP_SALDO_INICIAL_DE_SB6 AUX

	UPDATE AUX
		SET AUX.B6_QUANT  =  AUX.B6_QUANT - AUX.TT_QUANT
	FROM #TEMP_SALDO_INICIAL_DE_SB6 AUX

	--
	-- Cria tabela que recebe os movimentos em SB6
	--
    CREATE TABLE #TEMP_MOVIMENTOS_DE_SB6
      (
		B6_PRODUTO	VARCHAR(15)		 NULL,
		B1_DESC		VARCHAR(50)		 NULL,
		B1_TIPO		VARCHAR(2)		 NULL,
		B6_LOCAL	VARCHAR(2)		 NULL,
		B6_TES		VARCHAR(3)		 NULL,
		B6_TIPO		VARCHAR(1)		 NULL,
		ZAJ_COD		VARCHAR(3)		 NULL,
		ZAJ_TIPO	VARCHAR(1)		 NULL,
		B6_QUANT	INT,
		SLD_INICIAL	INT,
		TT_QUANT	INT,
		B6_IDENT	VARCHAR(6)		 NULL,
		VL_CUSTO	DECIMAL(12,4),
		B1_ITEMCC	VARCHAR(9)		 NULL
      )

	INSERT INTO #TEMP_MOVIMENTOS_DE_SB6
      (
		B6_PRODUTO	,
		B1_DESC		,
		B1_TIPO		,
		B6_LOCAL	,
		B6_TES		,
		B6_TIPO		,
		ZAJ_COD		,
		ZAJ_TIPO	,
		B6_QUANT	,
		SLD_INICIAL	,
		B6_IDENT	,
		B1_ITEMCC
	  )	SELECT  
			B6_PRODUTO	,
			B1_DESC		,
			B1_TIPO		,
			B6_LOCAL	,
			B6_TES		,
			B6_TIPO		,
			ISNULL(ZAJ_COD,'')	AS ZAJ_COD	,
			ISNULL(ZAJ_TIPO,'') AS ZAJ_TIPO	,
			B6_QUANT,
			0					AS SLD_INICIAL,
			B6_IDENT	,
			B1_ITEMCC
		FROM SB6040 SB6 WITH(NOLOCK)
			INNER JOIN SB1040 SB1 WITH(NOLOCK) ON SB1.B1_COD=SB6.B6_PRODUTO AND SB1.D_E_L_E_T_ 	<> '*' 
			INNER JOIN SF4040 SF4 WITH(NOLOCK) ON F4_CODIGO = B6_TES AND SF4.D_E_L_E_T_	= ' ' 
			LEFT OUTER JOIN ZAJ040 ZAJ WITH(NOLOCK) ON ZAJ_COD = F4_META AND ZAJ.D_E_L_E_T_	= ' '
		WHERE   
			SB6.D_E_L_E_T_ 	 	<> '*' 			
			AND SB6.B6_FILIAL	= @CFILIAL
			AND SB1.B1_FILIAL	= @CFILIAL
			AND SB1.B1_TIPO		>= @CTIPOINI
			AND SB1.B1_TIPO		<= @CTIPOFIN
			AND SB6.B6_PRODUTO	>= @CPRODUTOINI
			AND SB6.B6_PRODUTO	<= @CPRODUTOFIN
			AND SB6.B6_LOCAL	>= @CLOCALINI
			AND SB6.B6_LOCAL	<= @CLOCALFIN
			AND SB6.B6_DTDIGIT	>= @DINICIO
			AND SB6.B6_DTDIGIT	<= @DFINAL 
			AND SB6.B6_ESTOQUE	=  'S'
			AND SB6.B6_PODER3	=  'R'

	INSERT INTO #TEMP_MOVIMENTOS_DE_SB6
      (
		B6_PRODUTO	,
		B1_DESC		,
		B1_TIPO		,
		B6_LOCAL	,
		B6_TES		,
		B6_TIPO		,
		ZAJ_COD		,
		ZAJ_TIPO	,
		B6_QUANT	,
		SLD_INICIAL	,
		B6_IDENT	,
		B1_ITEMCC
	  )	SELECT  
			B6_PRODUTO	,
			B1_DESC		,
			B1_TIPO		,
			' '					AS B6_LOCAL	,
			B6_TES		,
			B6_TIPO		,
			ISNULL(ZAJ_COD,'')	AS ZAJ_COD	,
			ISNULL(ZAJ_TIPO,'') AS ZAJ_TIPO	,
			B6_QUANT * -1		AS B6_QUANT	,
			0					AS SLD_INICIAL,
			B6_IDENT	,
			B1_ITEMCC
		FROM SB6040 SB6 WITH(NOLOCK)
			INNER JOIN SB1040 SB1 WITH(NOLOCK) ON SB1.B1_COD=SB6.B6_PRODUTO AND SB1.D_E_L_E_T_ 	<> '*' 
			INNER JOIN SF4040 SF4 WITH(NOLOCK) ON F4_CODIGO = B6_TES AND SF4.D_E_L_E_T_	= ' ' 
			LEFT OUTER JOIN ZAJ040 ZAJ WITH(NOLOCK) ON ZAJ_COD = F4_META AND ZAJ.D_E_L_E_T_	= ' '
		WHERE   
			SB6.D_E_L_E_T_ 	 	<> '*' 
			AND SB6.B6_FILIAL	= @CFILIAL
			AND SB1.B1_FILIAL	= @CFILIAL
			AND SB1.B1_TIPO		>= @CTIPOINI
			AND SB1.B1_TIPO		<= @CTIPOFIN
			AND SB6.B6_PRODUTO	>= @CPRODUTOINI
			AND SB6.B6_PRODUTO	<= @CPRODUTOFIN
			AND SB6.B6_DTDIGIT	>= @DINICIO
			AND SB6.B6_DTDIGIT	<= @DFINAL 
			AND SB6.B6_ESTOQUE	=  'S'
			AND SB6.B6_PODER3	=  'D'
			AND EXISTS (
						SELECT 'X' FROM SB6040 AUX WITH(NOLOCK)
						WHERE  
							AUX.B6_FILIAL	= @CFILIAL 
						AND AUX.B6_IDENT	= SB6.B6_IDENT 
						AND AUX.B6_PRODUTO	= SB6.B6_PRODUTO 
						AND AUX.D_E_L_E_T_ 	= ' ' 
						AND AUX.B6_ESTOQUE	= 'S'
						AND AUX.B6_PODER3	= 'R'
						AND AUX.B6_LOCAL	>= @CLOCALINI
						AND AUX.B6_LOCAL	<= @CLOCALFIN
						)

	UPDATE AUX
		SET AUX.B6_LOCAL  =  
			ISNULL( 
					(
						SELECT SB6.B6_LOCAL
						FROM SB6040 SB6 WITH(NOLOCK)
						WHERE  
							SB6.B6_FILIAL	= @CFILIAL 
						AND SB6.B6_IDENT	= AUX.B6_IDENT 
						AND SB6.B6_PRODUTO	= AUX.B6_PRODUTO 
						AND SB6.D_E_L_E_T_ 	= ' ' 
						AND SB6.B6_ESTOQUE	= 'S'
						AND SB6.B6_PODER3	= 'R'
					)	,0 )
	FROM #TEMP_MOVIMENTOS_DE_SB6 AUX
	WHERE AUX.B6_LOCAL=' '


	UPDATE AUX
		SET SLD_INICIAL = ISNULL( 
			(
				SELECT SUM(B6_QUANT) FROM #TEMP_SALDO_INICIAL_DE_SB6 AUX_II 
				WHERE 
					AUX.B6_PRODUTO	= AUX_II.B6_PRODUTO 
				AND AUX.B6_LOCAL	= AUX_II.B6_LOCAL
				AND AUX.B6_TIPO		= AUX_II.B6_TIPO
			) ,0)
	FROM #TEMP_MOVIMENTOS_DE_SB6 AUX

	--
	-- Insere movimento onde ocorre apenas saldo inicial e não tem movimento no periodo selecionado
	--
	INSERT INTO #TEMP_MOVIMENTOS_DE_SB6
      (
		B6_PRODUTO	,
		B1_DESC		,
		B1_TIPO		,
		B6_LOCAL	,
		B6_TES		,
		B6_TIPO		,
		ZAJ_COD		,
		ZAJ_TIPO	,
		B6_QUANT	,
		SLD_INICIAL	,
		B1_ITEMCC
	  ) SELECT 
			B6_PRODUTO	,
			B1_DESC		,
			B1_TIPO		,
			B6_LOCAL	,
			''					AS B6_TES		,
			B6_TIPO		,
			''					AS ZAJ_COD		,
			''					AS ZAJ_TIPO		,
			0					AS B6_QUANT		,
			SUM(B6_QUANT)		AS SLD_INICIAL	,
			B1_ITEMCC
		FROM #TEMP_SALDO_INICIAL_DE_SB6 TMP
		WHERE NOT EXISTS (
						SELECT 'X' FROM #TEMP_MOVIMENTOS_DE_SB6 AUX 
						WHERE
							AUX.B6_PRODUTO	= TMP.B6_PRODUTO
						AND AUX.B6_LOCAL	= TMP.B6_LOCAL
						AND AUX.B6_TIPO		= TMP.B6_TIPO
					)
		GROUP BY B6_PRODUTO, B1_DESC, B1_TIPO, B6_LOCAL, B6_TIPO, B1_ITEMCC

	-- COMENTADO POR GILBERTO E CRIADA OUTRA LINHA PARA OBTER O CUSTO DE ACORDO COM O FECHAMENTO DO PRÓPRIO PROTHEUS, ATRAVÉS DA FUNÇÃO (RET_CUSTO_ATUAL_CT) - 29/10/2014
	--UPDATE #TEMP_MOVIMENTOS_DE_SB6 SET VL_CUSTO = ISNULL((SELECT DISTINCT CONVERT( DECIMAL(12,4) , ZAI_CUSTO ) FROM ZAI040 WITH(NOLOCK) WHERE B6_PRODUTO=ZAI_CODPRO AND ZAI_FILIAL=@CFILIAL AND D_E_L_E_T_=' '),0)
	UPDATE #TEMP_MOVIMENTOS_DE_SB6 SET VL_CUSTO = CAST((SELECT dbo.RET_CUSTO_ATUAL_CT('04', @CFILIAL, (CASE WHEN B6_TIPO IN ('PA','PR','PG') THEN '21' ELSE B6_LOCAL END), CONVERT(VARCHAR(8), GETDATE(), 112), B6_PRODUTO)) AS DECIMAL(12,4))

	---------------------------------------------[ TERMINO DA ROTINA PARA CALCULO DE TERCEIROS ]--------------------------------------------------

	--
	-- Cria tabela que recebe movimentos Saldo Inicial
	--
    CREATE TABLE #TEMP_SALDO_INICIAL
      (
		B9_COD		VARCHAR(15)		 NULL,
		B1_DESC		VARCHAR(50)		 NULL,
		B1_TIPO		VARCHAR(2)		 NULL,
		B9_LOCAL	VARCHAR(2)		 NULL,
		B9_DATA		VARCHAR(10)		 NULL,
		D1_TES		VARCHAR(3)		 NULL,
		ZAJ_COD		VARCHAR(3)		 NULL,
		ZAJ_TIPO	VARCHAR(1)		 NULL,
		B9_QINI		INT,
		D1_QUANT	INT,
		D2_QUANT	INT,
		D3_QUANT	INT,
		VL_CUSTO	DECIMAL(12,4),
		B1_ITEMCC	VARCHAR(9)		 NULL
      )

	IF @NTIPOREL = '1'
	BEGIN
		INSERT INTO #TEMP_SALDO_INICIAL
		  (
			B9_COD		,
			B1_DESC		,
			B1_TIPO		,
			B9_LOCAL	,
			B9_DATA		,
			D1_TES		,
			ZAJ_COD		,
			ZAJ_TIPO	,
			B9_QINI		,
			D1_QUANT	,
			D2_QUANT	,
			D3_QUANT	,
			VL_CUSTO	,
			B1_ITEMCC
		  ) EXEC [SP_REL_MOVIMENTO_DIARIO_SALDO_SB9_ACTION] @DINICIO, @DFINAL, @CPRODUTOINI, @CPRODUTOFIN,	@CLOCALINI, @CTIPOINI, @CFILIAL
	END


	IF @NTIPOREL = '3'
	BEGIN
		INSERT INTO #TEMP_SALDO_INICIAL
		  (
			B9_COD		,
			B1_DESC		,
			B1_TIPO		,
			B9_LOCAL	,
			B9_DATA		,
			D1_TES		,
			ZAJ_COD		,
			ZAJ_TIPO	,
			B9_QINI		,
			D1_QUANT	,
			D2_QUANT	,
			D3_QUANT	,
			VL_CUSTO	,
			B1_ITEMCC
		  ) EXEC [SP_REL_MOVIMENTO_DIARIO_SALDO_SB2_ACTION] @DINICIO, @DFINAL, @CPRODUTOINI, @CPRODUTOFIN,	@CLOCALINI, @CTIPOINI, @CFILIAL
	END


	--
	-- Cria tabela que recebe movimentos de Entrada de NF
	--
    CREATE TABLE #TEMP_MOVIMENTOS_DE_SD1
      (
		D1_COD		VARCHAR(15)		 NULL,
		B1_DESC		VARCHAR(50)		 NULL,
		B1_TIPO		VARCHAR(2)		 NULL,
		D1_LOCAL	VARCHAR(2)		 NULL,
		D1_TES		VARCHAR(3)		 NULL,
		ZAJ_COD		VARCHAR(3)		 NULL,
		ZAJ_TIPO	VARCHAR(1)		 NULL,
		D1_QUANT	INT,
		VL_CUSTO	DECIMAL(12,4),
		B1_ITEMCC	VARCHAR(9)		 NULL
      )

	INSERT INTO #TEMP_MOVIMENTOS_DE_SD1
      (
		D1_COD		,
		B1_DESC		,
		B1_TIPO		,
		D1_LOCAL	,
		D1_TES		,
		ZAJ_COD		,
		ZAJ_TIPO	,
		D1_QUANT	,
		B1_ITEMCC
	  )	SELECT  
			D1_COD		,
			B1_DESC		,
			B1_TIPO		,
			D1_LOCAL	,
			D1_TES		,
			ISNULL(ZAJ_COD,'')	AS ZAJ_COD	,
			ISNULL(ZAJ_TIPO,'') AS ZAJ_TIPO	,
			SUM(D1_QUANT) AS D1_QUANT		,
			B1_ITEMCC
		FROM SD1040 SD1 WITH(NOLOCK)
			INNER JOIN SB1040 SB1 WITH(NOLOCK) ON SB1.B1_COD=SD1.D1_COD AND SB1.D_E_L_E_T_ 	<> '*' 
			INNER JOIN SF4040 SF4 WITH(NOLOCK) ON F4_CODIGO = D1_TES AND SF4.F4_ESTOQUE='S' AND SF4.D_E_L_E_T_	= ' '
			LEFT OUTER JOIN ZAJ040 ZAJ WITH(NOLOCK) ON ZAJ_COD = F4_META AND ZAJ.D_E_L_E_T_	= ' '
		WHERE   
			SD1.D_E_L_E_T_ 	 	<> '*' 
			AND SD1.D1_ORIGLAN != 'LF'
			AND SD1.D1_FILIAL	= @CFILIAL
			AND SB1.B1_FILIAL	= @CFILIAL
			AND SB1.B1_TIPO		>= @CTIPOINI
			AND SB1.B1_TIPO		<= @CTIPOFIN
			AND SD1.D1_COD		>= @CPRODUTOINI
			AND SD1.D1_COD		<= @CPRODUTOFIN
			AND SD1.D1_LOCAL	>= @CLOCALINI
			AND SD1.D1_LOCAL	<= @CLOCALFIN
			AND SD1.D1_DTDIGIT	>= @DINICIO
			AND SD1.D1_DTDIGIT	<= @DFINAL 
		GROUP BY D1_COD, B1_DESC, B1_TIPO, D1_LOCAL, D1_TES, ZAJ_COD, ZAJ_TIPO, F4_TIPO, B1_ITEMCC


	--
	-- Cria tabela que recebe movimentos de Saida de NF
	--
    CREATE TABLE #TEMP_MOVIMENTOS_DE_SD2
      (
		D2_COD		VARCHAR(15)		 NULL,
		B1_DESC		VARCHAR(50)		 NULL,
		B1_TIPO		VARCHAR(2)		 NULL,
		D2_LOCAL	VARCHAR(2)		 NULL,
		D2_TES		VARCHAR(3)		 NULL,
		ZAJ_COD		VARCHAR(3)		 NULL,
		ZAJ_TIPO	VARCHAR(1)		 NULL,
		D2_QUANT	INT	,
		VL_CUSTO	DECIMAL(12,4),
		B1_ITEMCC	VARCHAR(9)		 NULL
      )

	INSERT INTO #TEMP_MOVIMENTOS_DE_SD2
      (
		D2_COD		,
		B1_DESC		,
		B1_TIPO		,
		D2_LOCAL	,
		D2_TES		,
		ZAJ_COD		,
		ZAJ_TIPO	,
		D2_QUANT	,
		B1_ITEMCC
	  )	SELECT  
			D2_COD		,
			B1_DESC		,
			D2_TP				AS B1_TIPO	,
			D2_LOCAL	,
			D2_TES		,
			ISNULL(ZAJ_COD,'')	AS ZAJ_COD	,
			ISNULL(ZAJ_TIPO,'') AS ZAJ_TIPO	,
			SUM(D2_QUANT) AS D2_QUANT,
			B1_ITEMCC
		FROM SD2040 SD2 WITH(NOLOCK)
			INNER JOIN SB1040 SB1 WITH(NOLOCK) ON SB1.B1_COD=SD2.D2_COD AND SB1.D_E_L_E_T_ 	<> '*'
			INNER JOIN SF4040 SF4 WITH(NOLOCK) ON F4_CODIGO = D2_TES AND SF4.F4_ESTOQUE='S' AND SF4.D_E_L_E_T_	= ' '
			LEFT OUTER JOIN ZAJ040 ZAJ WITH(NOLOCK) ON ZAJ_COD = F4_META AND ZAJ.D_E_L_E_T_	= ' '
		WHERE   
			SD2.D_E_L_E_T_ 	 	<> '*' 
			AND SD2.D2_ORIGLAN != 'LF' 			 
			AND SD2.D2_FILIAL	= @CFILIAL
			AND SB1.B1_FILIAL	= @CFILIAL
			AND SD2.D2_TP		>= @CTIPOINI
			AND SD2.D2_TP		<= @CTIPOFIN
			AND SD2.D2_COD		>= @CPRODUTOINI
			AND SD2.D2_COD		<= @CPRODUTOFIN
			AND SD2.D2_LOCAL	>= @CLOCALINI
			AND SD2.D2_LOCAL	<= @CLOCALFIN
			AND SD2.D2_EMISSAO	>= @DINICIO
			AND SD2.D2_EMISSAO	<= @DFINAL 
		GROUP BY D2_COD, B1_DESC, D2_TP, D2_LOCAL, D2_TES, ZAJ_COD, ZAJ_TIPO, F4_TIPO, B1_ITEMCC

	--
	-- Cria tabela que recebe movimentos entre armazens e produção
	--
    CREATE TABLE #TEMP_MOVIMENTOS_DE_SD3
      (
		D3_COD		VARCHAR(15)		 NULL,
		B1_DESC		VARCHAR(50)		 NULL,
		B1_TIPO		VARCHAR(2)		 NULL,
		D3_LOCAL	VARCHAR(2)		 NULL,
		ZAJ_COD		VARCHAR(3)		 NULL,
		ZAJ_TIPO	VARCHAR(1)		 NULL,
		D3_QUANT	INT,
		VL_CUSTO	DECIMAL(12,4),
		B1_ITEMCC	VARCHAR(9)		 NULL
      )

	INSERT INTO #TEMP_MOVIMENTOS_DE_SD3
      (
		D3_COD		,
		B1_DESC		,
		B1_TIPO		,
		D3_LOCAL	,
		ZAJ_COD		,
		ZAJ_TIPO	,
		D3_QUANT	,
		B1_ITEMCC	
	  )	SELECT  
			D3_COD		,
			B1_DESC		,
			D3_TIPO				AS B1_TIPO	,
			D3_LOCAL	,
			ISNULL(D3_TM,'')	AS ZAJ_COD	,
			'X'					AS ZAJ_TIPO	,
			CASE WHEN CAST( ISNULL(SD3.D3_TM,0) AS INT)  < 500
				THEN SD3.D3_QUANT * +1
				ELSE SD3.D3_QUANT * -1
			END AS D3_QUANT,
			B1_ITEMCC
		FROM SD3040 SD3 WITH(NOLOCK)
			INNER JOIN SB1040 SB1 WITH(NOLOCK) ON SB1.B1_COD=SD3.D3_COD AND SB1.D_E_L_E_T_ 	<> '*' 
		WHERE   
			SD3.D_E_L_E_T_ 	 	<> '*' 			
			AND SD3.D3_FILIAL	= @CFILIAL
			AND SB1.B1_FILIAL	= @CFILIAL
			AND SD3.D3_TIPO		>= @CTIPOINI
			AND SD3.D3_TIPO		<= @CTIPOFIN
			AND SD3.D3_COD		>= @CPRODUTOINI
			AND SD3.D3_COD		<= @CPRODUTOFIN
			AND SD3.D3_LOCAL	>= @CLOCALINI
			AND SD3.D3_LOCAL	<= @CLOCALFIN
			AND SD3.D3_EMISSAO	>= @DINICIO
			AND SD3.D3_EMISSAO	<= @DFINAL 
			AND SD3.D3_ESTORNO		<> 'S'

	-- COMENTADO POR GILBERTO E CRIADA OUTRA LINHA PARA OBTER O CUSTO DE ACORDO COM O FECHAMENTO DO PRÓPRIO PROTHEUS, ATRAVÉS DA FUNÇÃO (RET_CUSTO_ATUAL_CT) - 29/10/2014
	--UPDATE #TEMP_MOVIMENTOS_DE_SD1 SET VL_CUSTO = ISNULL((SELECT DISTINCT CONVERT( DECIMAL(12,4) , ZAI_CUSTO ) FROM ZAI040 WHERE D1_COD=ZAI_CODPRO AND ZAI_FILIAL=@CFILIAL AND D_E_L_E_T_=' '),0)
	UPDATE #TEMP_MOVIMENTOS_DE_SD1 SET VL_CUSTO = CAST((SELECT dbo.RET_CUSTO_ATUAL_CT('04', @CFILIAL, (CASE WHEN B1_TIPO IN ('PA','PR','PG') THEN '21' ELSE D1_LOCAL END), CONVERT(VARCHAR(8), GETDATE(), 112), D1_COD)) AS DECIMAL(12,4))
	
	--UPDATE #TEMP_MOVIMENTOS_DE_SD2 SET VL_CUSTO = ISNULL((SELECT DISTINCT CONVERT( DECIMAL(12,4) , ZAI_CUSTO ) FROM ZAI040 WHERE D2_COD=ZAI_CODPRO AND ZAI_FILIAL=@CFILIAL AND D_E_L_E_T_=' '),0)
	UPDATE #TEMP_MOVIMENTOS_DE_SD2 SET VL_CUSTO = CAST((SELECT dbo.RET_CUSTO_ATUAL_CT('04', @CFILIAL, (CASE WHEN B1_TIPO IN ('PA','PR','PG') THEN '21' ELSE D2_LOCAL END), CONVERT(VARCHAR(8), GETDATE(), 112), D2_COD)) AS DECIMAL(12,4))
	
	--UPDATE #TEMP_MOVIMENTOS_DE_SD3 SET VL_CUSTO = ISNULL((SELECT DISTINCT CONVERT( DECIMAL(12,4) , ZAI_CUSTO ) FROM ZAI040 WHERE D3_COD=ZAI_CODPRO AND ZAI_FILIAL=@CFILIAL AND D_E_L_E_T_=' '),0)
	UPDATE #TEMP_MOVIMENTOS_DE_SD3 SET VL_CUSTO = CAST((SELECT dbo.RET_CUSTO_ATUAL_CT('04', @CFILIAL, (CASE WHEN B1_TIPO IN ('PA','PR','PG') THEN '21' ELSE D3_LOCAL END), CONVERT(VARCHAR(8), GETDATE(), 112), D3_COD)) AS DECIMAL(12,4))


	DELETE #TEMP_SALDO_INICIAL	   
		WHERE ISNULL(B9_QINI,0) + ISNULL(D1_QUANT,0) + ISNULL(D2_QUANT,0) + ISNULL(D3_QUANT,0) = 0
		AND NOT EXISTS (SELECT 'X' FROM #TEMP_MOVIMENTOS_DE_SD1 XSD1 WHERE B9_COD=D1_COD AND B9_LOCAL=D1_LOCAL)
		AND NOT EXISTS (SELECT 'X' FROM #TEMP_MOVIMENTOS_DE_SD2 XSD2 WHERE B9_COD=D2_COD AND B9_LOCAL=D2_LOCAL)
		AND NOT EXISTS (SELECT 'X' FROM #TEMP_MOVIMENTOS_DE_SD3 XSD3 WHERE B9_COD=D3_COD AND B9_LOCAL=D3_LOCAL)

	-- COMENTADO POR GILBERTO E CRIADA OUTRA LINHA PARA OBTER O CUSTO DE ACORDO COM O FECHAMENTO DO PRÓPRIO PROTHEUS, ATRAVÉS DA FUNÇÃO (RET_CUSTO_ATUAL_CT) - 29/10/2014
	--UPDATE #TEMP_SALDO_INICIAL	   SET VL_CUSTO = ISNULL((SELECT DISTINCT CONVERT( DECIMAL(12,4) , ZAI_CUSTO ) FROM ZAI040 WITH(NOLOCK) WHERE B9_COD=ZAI_CODPRO AND ZAI_FILIAL=@CFILIAL AND D_E_L_E_T_=' '),0)
	UPDATE #TEMP_SALDO_INICIAL	   SET VL_CUSTO = CAST((SELECT dbo.RET_CUSTO_ATUAL_CT('04', @CFILIAL, (CASE WHEN B1_TIPO IN ('PA','PR','PG') THEN '21' ELSE B9_LOCAL END), CONVERT(VARCHAR(8), GETDATE(), 112), B9_COD)) AS DECIMAL(12,4))

	--
	-- Cria tabela que recebe movimentos entre armazens e produção
	--
	CREATE TABLE TEMP_ANALITICO_BM_ACTION
	  (
		ID_LOCAL	VARCHAR(2)		 NULL,
		NM_ARMAZ	VARCHAR(50)		 NULL,
		B1_TIPO		VARCHAR(2)		 NULL,
		EMPRESA		VARCHAR(20)		 NULL,
		L_T			VARCHAR(1)		 NULL,
		ID_PRODUTO	VARCHAR(15)		 NULL,
		NM_PRODUTO	VARCHAR(50)		 NULL,
		TT_QUANT	INT,
		VL_CUSTO_UN	DECIMAL(12,4),
		TT_CUSTO	DECIMAL(12,4),
		UN_NEGOCIO	VARCHAR(9)		 NULL
	  )

	INSERT INTO TEMP_ANALITICO_BM_ACTION
	  (
		ID_LOCAL	,
		NM_ARMAZ	,
		B1_TIPO		,
		EMPRESA		,
		L_T			,
		ID_PRODUTO	,
		NM_PRODUTO	,
		TT_QUANT	,
		VL_CUSTO_UN	,
		TT_CUSTO	,
		UN_NEGOCIO
	  )	SELECT
		ID_LOCAL	,	
		ISNULL(NM_ARMAZ,'') AS NM_ARMAZ,
		B1_TIPO		,
		@CNOMEXLS	,
		L_T			,
		ID_PRODUTO	,
		NM_PRODUTO	,
		SUM(TT_QUANT) AS TT_QUANT,
		VL_CUSTO_UN	,
		SUM(VL_CUSTO) AS TT_CUSTO,
		B1_ITEMCC	AS 'UN_NEGOCIO'
		FROM (
				SELECT
					D1_LOCAL	AS ID_LOCAL		,
					B1_TIPO						,
					'L'			AS L_T			,
					D1_COD		AS ID_PRODUTO	,
					B1_DESC		AS NM_PRODUTO	,
					CASE ZAJ_TIPO 
						WHEN 'S' THEN D1_QUANT * -1
						WHEN 'E' THEN D1_QUANT * +1
					END AS TT_QUANT				,
					VL_CUSTO AS VL_CUSTO_UN,
					CASE ZAJ_TIPO 
						WHEN 'S' THEN (D1_QUANT * -1) * VL_CUSTO
						WHEN 'E' THEN (D1_QUANT * +1) * VL_CUSTO
					END AS VL_CUSTO,
					B1_ITEMCC
				FROM #TEMP_MOVIMENTOS_DE_SD1
			UNION ALL
				SELECT
					D2_LOCAL	AS ID_LOCAL		,
					B1_TIPO						,
					'L'			AS L_T			,
					D2_COD		AS ID_PRODUTO	,
					B1_DESC		AS NM_PRODUTO	,
					CASE ZAJ_TIPO 
						WHEN 'S' THEN D2_QUANT * -1
						WHEN 'E' THEN D2_QUANT * +1
					END AS TT_QUANT				,
					VL_CUSTO AS VL_CUSTO_UN,
					CASE ZAJ_TIPO 
						WHEN 'S' THEN (D2_QUANT * -1) * VL_CUSTO
						WHEN 'E' THEN (D2_QUANT * +1) * VL_CUSTO
					END AS VL_CUSTO,
					B1_ITEMCC
				FROM #TEMP_MOVIMENTOS_DE_SD2
			UNION ALL
				SELECT
					D3_LOCAL	AS ID_LOCAL		,
					B1_TIPO						,
					'L'			AS L_T			,
					D3_COD		AS ID_PRODUTO	,
					B1_DESC		AS NM_PRODUTO	,
					D3_QUANT	AS TT_QUANT		,
					VL_CUSTO	AS VL_CUSTO_UN	,
					(D3_QUANT * VL_CUSTO) AS VL_CUSTO,
					B1_ITEMCC
				FROM #TEMP_MOVIMENTOS_DE_SD3
			UNION ALL
				SELECT
					B9_LOCAL	AS ID_LOCAL		,
					B1_TIPO						,
					'L'			AS L_T			,
					B9_COD		AS ID_PRODUTO	,
					B1_DESC		AS NM_PRODUTO	,
					ISNULL(B9_QINI,0) + ISNULL(D1_QUANT,0) + ISNULL(D2_QUANT,0) + ISNULL(D3_QUANT,0)	AS TT_QUANT		,
					VL_CUSTO	AS VL_CUSTO_UN	,
					(ISNULL(B9_QINI,0) + ISNULL(D1_QUANT,0) + ISNULL(D2_QUANT,0) + ISNULL(D3_QUANT,0)) * VL_CUSTO AS VL_CUSTO,
					B1_ITEMCC
				FROM #TEMP_SALDO_INICIAL	   
			UNION ALL
				SELECT 
					B6_LOCAL	AS ID_LOCAL		,
					B1_TIPO						,
					'T'			AS L_T			,
					B6_PRODUTO	AS ID_PRODUTO	,
					B1_DESC		AS NM_PRODUTO	,
					B6_QUANT	AS TT_QUANT		,
					VL_CUSTO	AS VL_CUSTO_UN	,
					(B6_QUANT*VL_CUSTO)	AS TT_CUSTO	,
					B1_ITEMCC
				FROM #TEMP_MOVIMENTOS_DE_SB6 
				WHERE B6_TIPO='E'
			UNION ALL
				SELECT DISTINCT
					B6_LOCAL	AS ID_LOCAL		,
					B1_TIPO						,
					'T'			AS L_T			,
					B6_PRODUTO	AS ID_PRODUTO	,
					B1_DESC		AS NM_PRODUTO	,
					SLD_INICIAL	AS TT_QUANT		,
					VL_CUSTO	AS VL_CUSTO_UN	,
					(SLD_INICIAL*VL_CUSTO)	AS TT_CUSTO	,
					B1_ITEMCC
				FROM #TEMP_MOVIMENTOS_DE_SB6 
				WHERE B6_TIPO='E'
			) TMP
		LEFT OUTER JOIN TBL_NOME_ARMAZENS AMZ ON TMP.ID_LOCAL=AMZ.ID_ARMAZ
		GROUP BY ID_PRODUTO, NM_PRODUTO, B1_TIPO, ID_LOCAL, AMZ.NM_ARMAZ, L_T, B1_ITEMCC, VL_CUSTO_UN
		ORDER BY ID_PRODUTO, ID_LOCAL

	DELETE TEMP_ANALITICO_BM_ACTION WHERE TT_QUANT=0


	IF @CFILIAL='02'
	BEGIN
		--
		-- Cria tabela que recebe movimentos entre armazens e produção
		--
		CREATE TABLE TEMP_ANALITICO_BM_ACTION_VARGINHA
		  (
			ID_LOCAL	VARCHAR(2)		 NULL,
			NM_ARMAZ	VARCHAR(50)		 NULL,
			B1_TIPO		VARCHAR(2)		 NULL,
			EMPRESA		VARCHAR(20)		 NULL,
			L_T			VARCHAR(1)		 NULL,
			ID_PRODUTO	VARCHAR(15)		 NULL,
			NM_PRODUTO	VARCHAR(50)		 NULL,
			TT_QUANT	INT,
			VL_CUSTO_UN	DECIMAL(12,4),
			TT_CUSTO	DECIMAL(12,4),
			UN_NEGOCIO	VARCHAR(9)		 NULL
		  )

		INSERT INTO TEMP_ANALITICO_BM_ACTION_VARGINHA
		  (
			ID_LOCAL	,
			NM_ARMAZ	,
			B1_TIPO		,
			EMPRESA		,
			L_T			,
			ID_PRODUTO	,
			NM_PRODUTO	,
			TT_QUANT	,
			VL_CUSTO_UN	,
			TT_CUSTO	,
			UN_NEGOCIO
		  )	SELECT
			ID_LOCAL	,
			NM_ARMAZ	,
			B1_TIPO		,
			EMPRESA		,
			L_T			,
			ID_PRODUTO	,
			NM_PRODUTO	,
			TT_QUANT	,
			VL_CUSTO_UN	,
			TT_CUSTO	,
			UN_NEGOCIO
			FROM TEMP_ANALITICO_BM_ACTION

		DROP TABLE TEMP_ANALITICO_BM_ACTION

	END

	--
	-- Cria tabela que recebe movimentos entre armazens e produção para a visão sintética
	--
    CREATE TABLE TEMP_MOVIMENTOS_BM_ACTION
      (
		ID_LOCAL	VARCHAR(2)		 NULL,
		NM_ARMAZ	VARCHAR(50)		 NULL,
		B1_TIPO		VARCHAR(2)		 NULL,
		EMPRESA		VARCHAR(20)		 NULL,
		TT_QUANT	INT,
		TT_CUSTO	DECIMAL(12,4),
		DE_QUANT	INT,
		DE_CUSTO	DECIMAL(12,4),
		EM_QUANT	INT,
		EM_CUSTO	DECIMAL(12,4),
		UN_NEGOCIO	VARCHAR(9)		 NULL
      )


	INSERT INTO TEMP_MOVIMENTOS_BM_ACTION
      (
		ID_LOCAL	,
		NM_ARMAZ	,
		B1_TIPO		,
		EMPRESA		,
		TT_QUANT	,
		TT_CUSTO	,
		DE_QUANT	,
		DE_CUSTO	,
		EM_QUANT	,
		EM_CUSTO	,
		UN_NEGOCIO	
	  )	SELECT
		ID_LOCAL						,	
		ISNULL(NM_ARMAZ,'') AS NM_ARMAZ ,
		B1_TIPO							,
		@CNOMEXLS			AS EMPRESA	,
		SUM(TT_QUANT)		AS TT_QUANT	,
		SUM(VL_CUSTO)		AS TT_CUSTO ,
		SUM(DE_QUANT)		AS DE_QUANT	,
		SUM(DE_CUSTO)		AS DE_CUSTO	,
		SUM(EM_QUANT)		AS EM_QUANT	,
		SUM(EM_CUSTO)		AS EM_CUSTO	,
		B1_ITEMCC			AS 'UN_NEGOCIO'
	FROM
		(
			SELECT
				B1_TIPO						,
				D1_LOCAL	AS ID_LOCAL		,
				D1_TES		AS ID_TES		,
				ZAJ_COD						,
				ZAJ_TIPO					,
				CASE ZAJ_TIPO 
					WHEN 'S' THEN D1_QUANT * -1
					WHEN 'E' THEN D1_QUANT * +1
				END AS TT_QUANT				,
				CASE ZAJ_TIPO 
					WHEN 'S' THEN (D1_QUANT * -1 ) * VL_CUSTO
					WHEN 'E' THEN (D1_QUANT * +1 ) * VL_CUSTO
				END AS VL_CUSTO				,
				0			AS DE_QUANT		,
				0			AS DE_CUSTO		,
				0			AS EM_QUANT		,
				0			AS EM_CUSTO		,
				B1_ITEMCC
			FROM #TEMP_MOVIMENTOS_DE_SD1
		UNION ALL
			SELECT
				B1_TIPO						,
				D2_LOCAL	AS ID_LOCAL		,
				D2_TES		AS ID_TES		,
				ZAJ_COD						,
				ZAJ_TIPO					,
				CASE ZAJ_TIPO 
					WHEN 'S' THEN D2_QUANT * -1
					WHEN 'E' THEN D2_QUANT * +1
				END AS TT_QUANT				,
				CASE ZAJ_TIPO 
					WHEN 'S' THEN (D2_QUANT * -1 ) * VL_CUSTO
					WHEN 'E' THEN (D2_QUANT * +1 ) * VL_CUSTO
				END AS VL_CUSTO				,
				0			AS DE_QUANT		,
				0			AS DE_CUSTO		,
				0			AS EM_QUANT		,
				0			AS EM_CUSTO		,
				B1_ITEMCC
			FROM #TEMP_MOVIMENTOS_DE_SD2
		UNION ALL
			SELECT
				B1_TIPO						,
				D3_LOCAL	AS ID_LOCAL		,
				''			AS ID_TES		,
				ZAJ_COD						,
				ZAJ_TIPO					,
				D3_QUANT	AS TT_QUANT		,
				(D3_QUANT * VL_CUSTO) AS VL_CUSTO	,
				0			AS DE_QUANT		,
				0			AS DE_CUSTO		,
				0			AS EM_QUANT		,
				0			AS EM_CUSTO		,
				B1_ITEMCC
			FROM #TEMP_MOVIMENTOS_DE_SD3
		UNION ALL
			SELECT
				B1_TIPO						,
				B9_LOCAL	AS ID_LOCAL		,
				''			AS ID_TES		,
				''			AS ZAJ_COD		,
				'I'			AS ZAJ_TIPO		,
				ISNULL(B9_QINI,0) + ISNULL(D1_QUANT,0) + ISNULL(D2_QUANT,0) + ISNULL(D3_QUANT,0)	AS TT_QUANT				,
				(ISNULL(B9_QINI,0) + ISNULL(D1_QUANT,0) + ISNULL(D2_QUANT,0) + ISNULL(D3_QUANT,0)) * VL_CUSTO AS VL_CUSTO	,
				0			AS DE_QUANT		,
				0			AS DE_CUSTO		,
				0			AS EM_QUANT		,
				0			AS EM_CUSTO		,
				B1_ITEMCC
			FROM #TEMP_SALDO_INICIAL	   
		UNION ALL
			SELECT 
				B1_TIPO						,
				B6_LOCAL	AS ID_LOCAL		,
				''			AS ID_TES		,
				''			AS ZAJ_COD		,
				''			AS ZAJ_TIPO		,
				0			AS TT_QUANT		,
				0			AS VL_CUSTO		,
				TT_QUANT			AS DE_QUANT		,
				(TT_QUANT*VL_CUSTO)	AS DE_CUSTO		,
				0			AS EM_QUANT		,
				0			AS EM_CUSTO		,
				B1_ITEMCC
			FROM #TEMP_MOVIMENTOS_DE_SB6 
			WHERE B6_TIPO='D'
		UNION ALL
			SELECT DISTINCT
				B1_TIPO						,
				B6_LOCAL	AS ID_LOCAL		,
				''			AS ID_TES		,
				''			AS ZAJ_COD		,
				''			AS ZAJ_TIPO		,
				0			AS TT_QUANT		,
				0			AS VL_CUSTO		,
				SLD_INICIAL				AS DE_QUANT		,
				(SLD_INICIAL*VL_CUSTO)	AS DE_CUSTO		,
				0			AS EM_QUANT		,
				0			AS EM_CUSTO		,
				B1_ITEMCC
			FROM #TEMP_MOVIMENTOS_DE_SB6 
			WHERE B6_TIPO='D'
		UNION ALL
			SELECT 
				B1_TIPO						,
				B6_LOCAL	AS ID_LOCAL		,
				''			AS ID_TES		,
				''			AS ZAJ_COD		,
				''			AS ZAJ_TIPO		,
				0			AS TT_QUANT		,
				0			AS VL_CUSTO		,
				0			AS DE_QUANT		,
				0			AS DE_CUSTO		,
				B6_QUANT			AS EM_QUANT		,
				(B6_QUANT*VL_CUSTO)	AS EM_CUSTO		,
				B1_ITEMCC
			FROM #TEMP_MOVIMENTOS_DE_SB6 
			WHERE B6_TIPO='E'
		UNION ALL
			SELECT DISTINCT
				B1_TIPO						,
				B6_LOCAL	AS ID_LOCAL		,
				''			AS ID_TES		,
				''			AS ZAJ_COD		,
				''			AS ZAJ_TIPO		,
				0			AS TT_QUANT		,
				0			AS VL_CUSTO		,
				0			AS DE_QUANT		,
				0			AS DE_CUSTO		,
				SLD_INICIAL				AS EM_QUANT		,
				(SLD_INICIAL*VL_CUSTO)	AS EM_CUSTO		,
				B1_ITEMCC		
			FROM #TEMP_MOVIMENTOS_DE_SB6 
			WHERE B6_TIPO='E'
			
		) TMP
	LEFT OUTER JOIN TBL_NOME_ARMAZENS AMZ ON ID_LOCAL=AMZ.ID_ARMAZ
	WHERE ZAJ_COD = ISNULL(@CTIPO, ZAJ_COD)
	GROUP BY ID_LOCAL, AMZ.NM_ARMAZ, B1_TIPO, B1_ITEMCC
	ORDER BY ID_LOCAL, B1_TIPO

	DELETE TEMP_MOVIMENTOS_BM_ACTION WHERE TT_QUANT=0

	IF @CFILIAL='02'
	BEGIN
		--
		-- Cria tabela que recebe movimentos entre armazens e produção para Balanço de Massas - DTS
		--
		CREATE TABLE TEMP_MOVIMENTOS_BM_ACTION_VARGINHA
		  (
			ID_LOCAL	VARCHAR(2)		 NULL,
			NM_ARMAZ	VARCHAR(50)		 NULL,
			B1_TIPO		VARCHAR(2)		 NULL,
			EMPRESA		VARCHAR(20)		 NULL,
			TT_QUANT	INT,
			TT_CUSTO	DECIMAL(12,4),
			DE_QUANT	INT,
			DE_CUSTO	DECIMAL(12,4),
			EM_QUANT	INT,
			EM_CUSTO	DECIMAL(12,4),
			UN_NEGOCIO	VARCHAR(9)		 NULL
		  )

		INSERT INTO TEMP_MOVIMENTOS_BM_ACTION_VARGINHA
		  (
			ID_LOCAL	,
			NM_ARMAZ	,
			B1_TIPO		,
			EMPRESA		,
			TT_QUANT	,
			TT_CUSTO	,
			DE_QUANT	,
			DE_CUSTO	,
			EM_QUANT	,
			EM_CUSTO	,
			UN_NEGOCIO
		  ) SELECT 
				ID_LOCAL	,	
				NM_ARMAZ	,
				B1_TIPO		,
				EMPRESA		,
				TT_QUANT	,
				TT_CUSTO	,
				DE_QUANT	,
				DE_CUSTO	,
				EM_QUANT	,
				EM_CUSTO	,
				UN_NEGOCIO
			FROM TEMP_MOVIMENTOS_BM_ACTION
	END

END
